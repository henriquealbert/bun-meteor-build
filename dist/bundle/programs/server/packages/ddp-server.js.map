{"version":3,"sources":["meteor://ðŸ’»app/packages/ddp-server/stream_server.js","meteor://ðŸ’»app/packages/ddp-server/livedata_server.js","meteor://ðŸ’»app/packages/ddp-server/writefence.js","meteor://ðŸ’»app/packages/ddp-server/crossbar.js","meteor://ðŸ’»app/packages/ddp-server/server_convenience.js"],"names":["websocketExtensions","_","once","extensions","websocketCompressionConfig","process","env","SERVER_WEBSOCKET_COMPRESSION","JSON","parse","push","Npm","require","configure","pathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","StreamServer","self","registration_callbacks","open_sockets","prefix","RoutePolicy","declare","sockjs","serverOptions","log","heartbeat_delay","disconnect_delay","jsessionid","USE_JSESSIONID","DISABLE_WEBSOCKETS","websocket","faye_server_options","server","createServer","WebApp","httpServer","removeListener","_timeoutAdjustmentRequestCallback","installHandlers","addListener","_redirectWebsocketEndpoint","on","socket","setWebsocketTimeout","timeout","protocol","_session","recv","connection","setTimeout","send","data","write","without","TEST_METADATA","stringify","testMessageOnConnect","each","callback","Object","assign","prototype","register","all_sockets","values","forEach","event","oldHttpServerListeners","listeners","slice","removeAllListeners","newListener","request","args","arguments","url","parsedUrl","pathname","format","oldListener","apply","_objectSpread","module","link","default","v","__reifyWaitForDeps__","DDPServer","publicationStrategies","SERVER_MERGE","useCollectionView","doAccountingForCollection","NO_MERGE_NO_HISTORY","NO_MERGE","SessionDocumentView","existsIn","Set","dataByKey","Map","_SessionDocumentView","_getCurrentFence","currentInvocation","_CurrentWriteFence","get","DDP","_CurrentMethodInvocation","fence","undefined","extend","getFields","ret","precedenceList","key","value","clearField","subscriptionHandle","changeCollector","removedValue","i","length","precedence","splice","delete","EJSON","equals","changeField","isAdd","clone","has","set","elt","find","SessionCollectionView","collectionName","sessionCallbacks","documents","callbacks","_SessionCollectionView","isEmpty","size","diff","previous","DiffSequence","diffMaps","both","bind","diffDocument","rightOnly","id","nowDV","added","leftOnly","prevDV","removed","fields","diffObjects","prev","now","changed","docView","add","changedResult","Error","err","Session","version","options","Random","initialized","inQueue","Meteor","_DoubleEndedQueue","blocked","workerRunning","cachedUnblock","_namedSubs","_universalSubs","userId","collectionViews","_isSending","_dontStartNewUniversalSubs","_pendingReady","_closeCallbacks","_socketUrl","_respondToPings","respondToPings","connectionHandle","close","onClose","fn","cb","bindEnvironment","defer","clientAddress","_clientAddress","httpHeaders","headers","msg","session","startUniversalSubs","heartbeatInterval","heartbeat","DDPCommon","Heartbeat","heartbeatTimeout","onTimeout","sendPing","start","Package","Facts","incrementServerFact","_checkPublishPromiseBeforeSend","f","_publishCursorPromise","finally","sendReady","subscriptionIds","subs","subscriptionId","_canSend","getPublicationStrategy","sendAdded","collection","sendChanged","sendRemoved","getSendCallbacks","getCollectionView","view","handlers","universal_publish_handlers","handler","_startSubscription","stop","_meteorSession","_deactivateAllSubscriptions","_removeSession","_printSentDDP","_debug","stringifyDDP","sendError","reason","offendingMessage","processMessage","msg_in","messageReceived","processNext","shift","runHandlers","unblock","onMessageHook","protocol_handlers","result","call","_isPromise","sub","name","params","Array","publish_handlers","error","concat","DDPRateLimiter","rateLimiterInput","type","connectionId","_increment","rateLimitResult","_check","allowed","getErrorMessage","timeToReset","unsub","_stopSubscription","method","randomSeed","_WriteFence","onAllCommitted","retire","methods","method_handlers","arm","setUserId","_setUserId","invocation","MethodInvocation","isSimulation","promise","Promise","resolve","reject","getCurrentMethodInvocationResult","withValue","maybeAuditArgumentChecks","keyName","finish","payload","then","exception","wrapInternalException","_eachSub","_diffCollectionViews","beforeCVs","leftValue","rightValue","doc","_deactivate","oldNamedSubs","newSub","_recreate","_runHandler","_noYieldsAllowed","subId","Subscription","unblockHander","subName","maybeSub","_name","_removeAllDocuments","response","httpForwardedCount","parseInt","remoteAddress","forwardedFor","isString","trim","split","_handler","_subscriptionId","_params","_subscriptionHandle","_deactivated","_stopCallbacks","_documents","_ready","_idFilter","idStringify","MongoID","idParse","resultOrThenable","_CurrentPublicationInvocation","e","_isDeactivated","isThenable","_publishHandlerResult","res","isCursor","c","_publishCursor","ready","catch","isArray","all","collectionNames","_getCollectionName","map","_callStopCallbacks","collectionDocs","strId","onStop","ids","Server","defaultPublicationStrategy","onConnectionHook","Hook","debugPrintExceptions","_publicationStrategies","sessions","stream_server","raw_msg","_printReceivedDDP","parseDDP","_handleConnect","onConnection","setPublicationStrategy","strategy","includes","onMessage","support","contains","SUPPORTED_DDP_VERSIONS","calculateVersion","publish","isObject","autopublish","is_auto","warned_about_autopublish","isAsyncCall","_isCallAsyncMethodRunning","func","_len","_key","pop","callAsync","_args$","_len2","_key2","hasOwnProperty","_set","_setCallAsyncMethodRunning","_CurrentCallAsyncInvocation","hasCallAsyncParent","applyAsync","isFromCallAsync","currentMethodInvocation","currentPublicationInvocation","makeRpcSeed","r","_urlForSession","sessionId","clientSupportedVersions","serverSupportedVersions","correctVersion","_calculateVersion","context","isClientSafe","originalMessage","message","details","_expectedByTest","stack","sanitizedError","description","Match","_failIfArgumentsAreNotAllChecked","__reify_async_result__","_reifyError","async","constructor","armed","fired","retired","outstanding_writes","before_fire_callbacks","completion_callbacks","beginWrite","committed","_committedFn","_maybeFire","onBeforeFire","_armAndWait","resolver","returnValue","armAndWait","invokeCallback","EnvironmentVariable","_Crossbar","nextId","listenersByCollection","listenersByCollectionCount","factPackage","factName","_collectionForMessage","listen","trigger","record","fire","notification","listenersForCollection","callbackIds","l","_matches","ObjectID","triggerValue","_InvalidationCrossbar","DDP_DEFAULT_CONNECTION_URL","refresh"],"mappings":"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","file":"/packages/ddp-server.js","sourcesContent":["// By default, we use the permessage-deflate extension with default\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n// JSON. If it represents a falsey value, then we do not use permessage-deflate\n// at all; otherwise, the JSON value is used as an argument to deflate's\n// configure method; see\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md\n//\n// (We do this in an _.once instead of at startup, because we don't want to\n// crash the tool during isopacket load if your JSON doesn't parse. This is only\n// a problem because the tool has to load the DDP server code just in order to\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\nvar websocketExtensions = _.once(function () {\n  var extensions = [];\n\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION\n        ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n  if (websocketCompressionConfig) {\n    extensions.push(Npm.require('permessage-deflate').configure(\n      websocketCompressionConfig\n    ));\n  }\n\n  return extensions;\n});\n\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX ||  \"\";\n\nStreamServer = function () {\n  var self = this;\n  self.registration_callbacks = [];\n  self.open_sockets = [];\n\n  // Because we are installing directly onto WebApp.httpServer instead of using\n  // WebApp.app, we have to process the path prefix ourselves.\n  self.prefix = pathPrefix + '/sockjs';\n  RoutePolicy.declare(self.prefix + '/', 'network');\n\n  // set up sockjs\n  var sockjs = Npm.require('sockjs');\n  var serverOptions = {\n    prefix: self.prefix,\n    log: function() {},\n    // this is the default, but we code it explicitly because we depend\n    // on it in stream_client:HEARTBEAT_TIMEOUT\n    heartbeat_delay: 45000,\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n    // bound for that much time, SockJS might not notice that the user has\n    // reconnected because the timer (of disconnect_delay ms) can fire before\n    // SockJS processes the new connection. Eventually we'll fix this by not\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which\n    // converts to Unix sockets) but for now, raise the delay.\n    disconnect_delay: 60 * 1000,\n    // Set the USE_JSESSIONID environment variable to enable setting the\n    // JSESSIONID cookie. This is useful for setting up proxies with\n    // session affinity.\n    jsessionid: !!process.env.USE_JSESSIONID\n  };\n\n  // If you know your server environment (eg, proxies) will prevent websockets\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n  // browsers) will not waste time attempting to use them.\n  // (Your server will still have a /websocket endpoint.)\n  if (process.env.DISABLE_WEBSOCKETS) {\n    serverOptions.websocket = false;\n  } else {\n    serverOptions.faye_server_options = {\n      extensions: websocketExtensions()\n    };\n  }\n\n  self.server = sockjs.createServer(serverOptions);\n\n  // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding\n  // request.  This compensates for the fact that sockjs removes all listeners\n  // for \"request\" to add its own.\n  WebApp.httpServer.removeListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n  self.server.installHandlers(WebApp.httpServer);\n  WebApp.httpServer.addListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // Support the /websocket endpoint\n  self._redirectWebsocketEndpoint();\n\n  self.server.on('connection', function (socket) {\n    // sockjs sometimes passes us null instead of a socket object\n    // so we need to guard against that. see:\n    // https://github.com/sockjs/sockjs-node/issues/121\n    // https://github.com/meteor/meteor/issues/10468\n    if (!socket) return;\n\n    // We want to make sure that if a client connects to us and does the initial\n    // Websocket handshake but never gets to the DDP handshake, that we\n    // eventually kill the socket.  Once the DDP handshake happens, DDP\n    // heartbeating will work. And before the Websocket handshake, the timeouts\n    // we set at the server level in webapp_server.js will work. But\n    // faye-websocket calls setTimeout(0) on any socket it takes over, so there\n    // is an \"in between\" state where this doesn't happen.  We work around this\n    // by explicitly setting the socket timeout to a relatively large time here,\n    // and setting it back to zero when we set up the heartbeat in\n    // livedata_server.js.\n    socket.setWebsocketTimeout = function (timeout) {\n      if ((socket.protocol === 'websocket' ||\n           socket.protocol === 'websocket-raw')\n          && socket._session.recv) {\n        socket._session.recv.connection.setTimeout(timeout);\n      }\n    };\n    socket.setWebsocketTimeout(45 * 1000);\n\n    socket.send = function (data) {\n      socket.write(data);\n    };\n    socket.on('close', function () {\n      self.open_sockets = _.without(self.open_sockets, socket);\n    });\n    self.open_sockets.push(socket);\n\n    // only to send a message after connection on tests, useful for\n    // socket-stream-client/server-tests.js\n    if (process.env.TEST_METADATA && process.env.TEST_METADATA !== \"{}\") {\n      socket.send(JSON.stringify({ testMessageOnConnect: true }));\n    }\n\n    // call all our callbacks when we get a new socket. they will do the\n    // work of setting up handlers and such for specific messages.\n    _.each(self.registration_callbacks, function (callback) {\n      callback(socket);\n    });\n  });\n\n};\n\nObject.assign(StreamServer.prototype, {\n  // call my callback when a new socket connects.\n  // also call it for all current connections.\n  register: function (callback) {\n    var self = this;\n    self.registration_callbacks.push(callback);\n    _.each(self.all_sockets(), function (socket) {\n      callback(socket);\n    });\n  },\n\n  // get a list of all sockets\n  all_sockets: function () {\n    var self = this;\n    return _.values(self.open_sockets);\n  },\n\n  // Redirect /websocket to /sockjs/websocket in order to not expose\n  // sockjs to clients that want to use raw websockets\n  _redirectWebsocketEndpoint: function() {\n    var self = this;\n    // Unfortunately we can't use a connect middleware here since\n    // sockjs installs itself prior to all existing listeners\n    // (meaning prior to any connect middlewares) so we need to take\n    // an approach similar to overshadowListeners in\n    // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n    ['request', 'upgrade'].forEach((event) => {\n      var httpServer = WebApp.httpServer;\n      var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n      httpServer.removeAllListeners(event);\n\n      // request and upgrade have different arguments passed but\n      // we only care about the first one which is always request\n      var newListener = function(request /*, moreArguments */) {\n        // Store arguments for use within the closure below\n        var args = arguments;\n\n        // TODO replace with url package\n        var url = Npm.require('url');\n\n        // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n        // preserving query string.\n        var parsedUrl = url.parse(request.url);\n        if (parsedUrl.pathname === pathPrefix + '/websocket' ||\n            parsedUrl.pathname === pathPrefix + '/websocket/') {\n          parsedUrl.pathname = self.prefix + '/websocket';\n          request.url = url.format(parsedUrl);\n        }\n        _.each(oldHttpServerListeners, function(oldListener) {\n          oldListener.apply(httpServer, args);\n        });\n      };\n      httpServer.addListener(event, newListener);\n    });\n  }\n});\n","DDPServer = {};\n\n// Publication strategies define how we handle data from published cursors at the collection level\n// This allows someone to:\n// - Choose a trade-off between client-server bandwidth and server memory usage\n// - Implement special (non-mongo) collections like volatile message queues\nconst publicationStrategies = {\n  // SERVER_MERGE is the default strategy.\n  // When using this strategy, the server maintains a copy of all data a connection is subscribed to.\n  // This allows us to only send deltas over multiple publications.\n  SERVER_MERGE: {\n    useCollectionView: true,\n    doAccountingForCollection: true,\n  },\n  // The NO_MERGE_NO_HISTORY strategy results in the server sending all publication data\n  // directly to the client. It does not remember what it has previously sent\n  // to it will not trigger removed messages when a subscription is stopped.\n  // This should only be chosen for special use cases like send-and-forget queues.\n  NO_MERGE_NO_HISTORY: {\n    useCollectionView: false,\n    doAccountingForCollection: false,\n  },\n  // NO_MERGE is similar to NO_MERGE_NO_HISTORY but the server will remember the IDs it has\n  // sent to the client so it can remove them when a subscription is stopped.\n  // This strategy can be used when a collection is only used in a single publication.\n  NO_MERGE: {\n    useCollectionView: false,\n    doAccountingForCollection: true,\n  }\n};\n\nDDPServer.publicationStrategies = publicationStrategies;\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported).\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nDDPServer._SessionDocumentView = SessionDocumentView;\n\nDDPServer._getCurrentFence = function () {\n  let currentInvocation = this._CurrentWriteFence.get();\n  if (currentInvocation) {\n    return currentInvocation;\n  }\n  currentInvocation = DDP._CurrentMethodInvocation.get();\n  return currentInvocation ? currentInvocation.fence : undefined;\n};\n\n_.extend(SessionDocumentView.prototype, {\n\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    self.dataByKey.forEach(function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n    var precedenceList = self.dataByKey.get(key);\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList)\n      return;\n\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0)\n          removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (precedenceList.length === 0) {\n      self.dataByKey.delete(key);\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined &&\n               !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n\n    if (!self.dataByKey.has(key)) {\n      self.dataByKey.set(key, [{subscriptionHandle: subscriptionHandle,\n                                value: value}]);\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey.get(key);\n    var elt;\n    if (!isAdd) {\n      elt = precedenceList.find(function (precedence) {\n          return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({subscriptionHandle: subscriptionHandle, value: value});\n    }\n\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = new Map();\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n\nObject.assign(SessionCollectionView.prototype, {\n\n  isEmpty: function () {\n    var self = this;\n    return self.documents.size === 0;\n  },\n\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffMaps(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now))\n          fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function(key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents.get(id);\n    var added = false;\n    if (!docView) {\n      added = true;\n      docView = new SessionDocumentView();\n      self.documents.set(id, docView);\n    }\n    docView.existsIn.add(subscriptionHandle);\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(\n        subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added)\n      self.callbacks.added(self.collectionName, id, changeCollector);\n    else\n      self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents.get(id);\n    if (!docView)\n      throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined)\n        docView.clearField(subscriptionHandle, key, changedResult);\n      else\n        docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents.get(id);\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    docView.existsIn.delete(subscriptionHandle);\n    if (docView.existsIn.size === 0) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      self.documents.delete(id);\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      docView.dataByKey.forEach(function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n\n  self.server = server;\n  self.version = version;\n\n  self.initialized = false;\n  self.socket = socket;\n\n  // Set to null when the session is destroyed. Multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n\n  self.blocked = false;\n  self.workerRunning = false;\n\n  self.cachedUnblock = null;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = new Map();\n  self._universalSubs = [];\n\n  self.userId = null;\n\n  self.collectionViews = new Map();\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // When we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n\n  self.send({ msg: 'connected', session: self.id });\n\n  // On initial connect, spin up all the universal publishers.\n  self.startUniversalSubs();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    // We no longer need the low level timeout because we have heartbeats.\n    socket.setWebsocketTimeout(0);\n\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({msg: 'ping'});\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"sessions\", 1);\n};\n\nObject.assign(Session.prototype, {\n  _checkPublishPromiseBeforeSend(f) {\n    if (!this._publishCursorPromise) {\n      f();\n      return;\n    }\n    this._publishCursorPromise.finally(() => f());\n  },\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending) {\n      self.send({msg: \"ready\", subs: subscriptionIds});\n    } else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n\n  _canSend(collectionName) {\n    return this._isSending || !this.server.getPublicationStrategy(collectionName).useCollectionView;\n  },\n\n\n  sendAdded(collectionName, id, fields) {\n    if (this._canSend(collectionName)) {\n      this.send({ msg: 'added', collection: collectionName, id, fields });\n    }\n  },\n\n  sendChanged(collectionName, id, fields) {\n    if (_.isEmpty(fields))\n      return;\n\n    if (this._canSend(collectionName)) {\n      this.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id,\n        fields\n      });\n    }\n  },\n\n  sendRemoved(collectionName, id) {\n    if (this._canSend(collectionName)) {\n      this.send({msg: \"removed\", collection: collectionName, id});\n    }\n  },\n\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n\n  getCollectionView: function (collectionName) {\n    var self = this;\n    var ret = self.collectionViews.get(collectionName);\n    if (!ret) {\n      ret = new SessionCollectionView(collectionName,\n                                        self.getSendCallbacks());\n      self.collectionViews.set(collectionName, ret);\n    }\n    return ret;\n  },\n\n  added(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.added(subscriptionHandle, id, fields);\n    } else {\n      this.sendAdded(collectionName, id, fields);\n    }\n  },\n\n  removed(subscriptionHandle, collectionName, id) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.removed(subscriptionHandle, id);\n      if (view.isEmpty()) {\n         this.collectionViews.delete(collectionName);\n      }\n    } else {\n      this.sendRemoved(collectionName, id);\n    }\n  },\n\n  changed(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.changed(subscriptionHandle, id, fields);\n    } else {\n      this.sendChanged(collectionName, id, fields);\n    }\n  },\n\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (! self.inQueue)\n      return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = new Map();\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"sessions\", -1);\n\n    Meteor.defer(function () {\n      // Stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n\n  // Send a message (doing nothing if no socket is connected right now).\n  // It should be a JSON object (it will be stringified).\n  send: function (msg) {\n    const self = this;\n    this._checkPublishPromiseBeforeSend(() => {\n      if (self.socket) {\n        if (Meteor._printSentDDP)\n          Meteor._debug('Sent DDP', DDPCommon.stringifyDDP(msg));\n        self.socket.send(DDPCommon.stringifyDDP(msg));\n      }\n    });\n  },\n\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {msg: 'error', reason: reason};\n    if (offendingMessage)\n      msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n\n  // Process 'msg' as an incoming message. As a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield). Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other).\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeats use Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      self.heartbeat.messageReceived();\n    };\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings)\n        self.send({msg: \"pong\", id: msg_in.id});\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, there is nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning)\n      return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      function runHandlers() {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked)\n            return; // idempotent\n          blocked = false;\n          processNext();\n        };\n\n        self.server.onMessageHook.each(function (callback) {\n          callback(msg, self);\n          return true;\n        });\n\n        if (_.has(self.protocol_handlers, msg.msg)) {\n          const result = self.protocol_handlers[msg.msg].call(\n            self,\n            msg,\n            unblock\n          );\n          if (Meteor._isPromise(result)) {\n            result.finally(() => unblock());\n          } else {\n            unblock();\n          }\n        } else {\n          self.sendError('Bad request', msg);\n          unblock(); // in case the handler didn't already do it\n        }\n      }\n\n      runHandlers();\n    };\n\n    processNext();\n  },\n\n  protocol_handlers: {\n    sub: function (msg, unblock) {\n      var self = this;\n\n      // cacheUnblock temporarly, so we can capture it later\n      // we will use unblock in current eventLoop, so this is safe\n      self.cachedUnblock = unblock;\n\n      // reject malformed messages\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.name) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array))) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub', id: msg.id,\n          error: new Meteor.Error(404, `Subscription '${msg.name}' not found`)});\n        return;\n      }\n\n      if (self._namedSubs.has(msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub', id: msg.id,\n            error: new Meteor.Error(\n              'too-many-requests',\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset})\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n      // cleaning cached unblock\n      self.cachedUnblock = null;\n    },\n\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n\n    method: async function (msg, unblock) {\n      var self = this;\n\n      // Reject malformed messages.\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.method) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array)) ||\n          (('randomSeed' in msg) && (typeof msg.randomSeed !== \"string\"))) {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null;\n\n      // Set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence;\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({msg: 'updated', methods: [msg.id]});\n      });\n\n      // Find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result', id: msg.id,\n          error: new Meteor.Error(404, `Method '${msg.method}' not found`)});\n        await fence.arm();\n        return;\n      }\n\n      var setUserId = function(userId) {\n        self._setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed,\n        fence,\n      });\n\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput)\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\n              \"too-many-requests\",\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset}\n            ));\n            return;\n          }\n        }\n\n        const getCurrentMethodInvocationResult = () =>\n          DDP._CurrentMethodInvocation.withValue(\n            invocation,\n            () =>\n              maybeAuditArgumentChecks(\n                handler,\n                invocation,\n                msg.params,\n                \"call to '\" + msg.method + \"'\"\n              ),\n            {\n              name: 'getCurrentMethodInvocationResult',\n              keyName: 'getCurrentMethodInvocationResult',\n            }\n          );\n        resolve(\n          DDPServer._CurrentWriteFence.withValue(\n            fence,\n            getCurrentMethodInvocationResult,\n            {\n              name: 'DDPServer._CurrentWriteFence',\n              keyName: '_CurrentWriteFence',\n            }\n          )\n        );\n      });\n\n      async function finish() {\n        await fence.arm();\n        unblock();\n      }\n\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n      return promise.then(async result => {\n        await finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, async (exception) => {\n        await finish();\n        payload.error = wrapInternalException(\n          exception,\n          `while invoking method '${msg.method}'`\n        );\n        self.send(payload);\n      });\n    }\n  },\n\n  _eachSub: function (f) {\n    var self = this;\n    self._namedSubs.forEach(f);\n    self._universalSubs.forEach(f);\n  },\n\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffMaps(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        rightValue.documents.forEach(function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        leftValue.documents.forEach(function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function(userId) {\n    var self = this;\n\n    if (userId !== null && typeof userId !== \"string\")\n      throw new Error(\"setUserId must be called on string or null, not \" +\n                      typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session. They will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription).\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = new Map();\n    self.userId = userId;\n\n    // _setUserId is normally called from a Meteor method with\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n    // expected to be set inside a publish function, so we temporary unset it.\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.\n    DDP._CurrentMethodInvocation.withValue(undefined, function () {\n      // Save the old named subs, and reset to having no subscriptions.\n      var oldNamedSubs = self._namedSubs;\n      self._namedSubs = new Map();\n      self._universalSubs = [];\n\n      oldNamedSubs.forEach(function (sub, subscriptionId) {\n        var newSub = sub._recreate();\n        self._namedSubs.set(subscriptionId, newSub);\n        // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.\n        newSub._runHandler();\n      });\n\n      // Allow newly-created universal subs to be started on our connection in\n      // parallel with the ones we're spinning up here, and spin up universal\n      // subs.\n      self._dontStartNewUniversalSubs = false;\n      self.startUniversalSubs();\n    }, { name: '_setUserId' });\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n\n    var sub = new Subscription(\n      self, handler, subId, params, name);\n\n    let unblockHander = self.cachedUnblock;\n    // _startSubscription may call from a lot places\n    // so cachedUnblock might be null in somecases\n    // assign the cachedUnblock\n    sub.unblock = unblockHander || (() => {});\n\n    if (subId)\n      self._namedSubs.set(subId, sub);\n    else\n      self._universalSubs.push(sub);\n\n    sub._runHandler();\n  },\n\n  // Tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n\n    var subName = null;\n    if (subId) {\n      var maybeSub = self._namedSubs.get(subId);\n      if (maybeSub) {\n        subName = maybeSub._name;\n        maybeSub._removeAllDocuments();\n        maybeSub._deactivate();\n        self._namedSubs.delete(subId);\n      }\n    }\n\n    var response = {msg: 'nosub', id: subId};\n\n    if (error) {\n      response.error = wrapInternalException(\n        error,\n        subName ? (\"from sub \" + subName + \" id \" + subId)\n          : (\"from sub id \" + subId));\n    }\n\n    self.send(response);\n  },\n\n  // Tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    self._namedSubs.forEach(function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = new Map();\n\n    self._universalSubs.forEach(function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n\n    if (httpForwardedCount === 0)\n      return self.socket.remoteAddress;\n\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (! _.isString(forwardedFor))\n      return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length)\n      return null;\n\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// Ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n * @showInstanceName true\n */\nvar Subscription = function (\n    session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // My subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // Undefined for universal subs\n  self._name = name;\n\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // Has _deactivate been called?\n  self._deactivated = false;\n\n  // Stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // The set of (collection, documentid) that this subscription has\n  // an opinion about.\n  self._documents = new Map();\n\n  // Remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a DDP consumer that isn't minimongo.\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"subscriptions\", 1);\n};\n\nObject.assign(Subscription.prototype, {\n  _runHandler: function() {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    if (!this.unblock) {\n      this.unblock = () => {};\n    }\n\n    const self = this;\n    let resultOrThenable = null;\n    try {\n      resultOrThenable = DDP._CurrentPublicationInvocation.withValue(\n        self,\n        () =>\n          maybeAuditArgumentChecks(\n            self._handler,\n            self,\n            EJSON.clone(self._params),\n            // It's OK that this would look weird for universal subscriptions,\n            // because they have no arguments so there can never be an\n            // audit-argument-checks failure.\n            \"publisher '\" + self._name + \"'\"\n          ),\n        { name: self._name }\n      );\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated()) return;\n\n    // Both conventional and async publish handler functions are supported.\n    // If an object is returned with a then() function, it is either a promise\n    // or thenable and will be resolved asynchronously.\n    const isThenable =\n      resultOrThenable && typeof resultOrThenable.then === 'function';\n    if (isThenable) {\n      Promise.resolve(resultOrThenable).then(\n        (...args) => self._publishHandlerResult.bind(self)(...args),\n        e => self.error(e)\n      );\n    } else {\n      self._publishHandlerResult(resultOrThenable);\n    }\n\n  },\n\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      this._publishCursorPromise = res._publishCursor(self).then(() => {\n        // _publishCursor only returns after the initial added callbacks have run.\n        // mark subscription as ready.\n        self.ready();\n      }).catch((e) => self.error(e));\n    } else if (_.isArray(res)) {\n      // Check all the elements are cursors\n      if (! _.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // Find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\n            \"Publish function returned multiple cursors for collection \" +\n              collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      };\n\n      this._publishCursorPromise = Promise.all(\n        res.map(c => c._publishCursor(self))\n      )\n        .then(() => {\n          self.ready();\n        })\n        .catch((e) => self.error(e));\n    } else if (res) {\n      // Truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \"\n                           + \"an array of Cursors\"));\n    }\n  },\n\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function() {\n    var self = this;\n    if (self._deactivated)\n      return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"subscriptions\", -1);\n  },\n\n  _callStopCallbacks: function () {\n    var self = this;\n    // Tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._documents.forEach(function (collectionDocs, collectionName) {\n        collectionDocs.forEach(function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(\n      self._session, self._handler, self._subscriptionId, self._params,\n      self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n    if (self._isDeactivated())\n      callback();\n    else\n      self._stopCallbacks.push(callback);\n  },\n\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      let ids = this._documents.get(collectionName);\n      if (ids == null) {\n        ids = new Set();\n        this._documents.set(collectionName, ids);\n      }\n      ids.add(id);\n    }\n\n    this._session._publishCursorPromise = this._publishCursorPromise;\n    this._session.added(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n    this._session.changed(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed (collectionName, id) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      // We don't bother to delete sets of things in a collection if the\n      // collection is empty.  It could break _removeAllDocuments.\n      this._documents.get(collectionName).delete(id);\n    }\n\n    this._session.removed(this._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    if (!self._subscriptionId)\n      return;  // Unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function (options = {}) {\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true,\n    defaultPublicationStrategy: publicationStrategies.SERVER_MERGE,\n    ...options,\n  };\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  // Map of callbacks to call when a new message comes in.\n  self.onMessageHook = new Hook({\n    debugPrintExceptions: \"onMessage callback\"\n  });\n\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n\n  self.method_handlers = {};\n\n  self._publicationStrategies = {};\n\n  self.sessions = new Map(); // map from id to session\n\n  self.stream_server = new StreamServer();\n\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = {msg: 'error', reason: reason};\n      if (offendingMessage)\n        msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n\n          self._handleConnect(socket, msg);\n\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg, e);\n      }\n    });\n\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        socket._meteorSession.close();\n      }\n    });\n  });\n};\n\nObject.assign(Server.prototype, {\n\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  /**\n   * @summary Set publication strategy for the given collection. Publications strategies are available from `DDPServer.publicationStrategies`. You call this method from `Meteor.server`, like `Meteor.server.setPublicationStrategy()`\n   * @locus Server\n   * @alias setPublicationStrategy\n   * @param collectionName {String}\n   * @param strategy {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   */\n  setPublicationStrategy(collectionName, strategy) {\n    if (!Object.values(publicationStrategies).includes(strategy)) {\n      throw new Error(`Invalid merge strategy: ${strategy} \n        for collection ${collectionName}`);\n    }\n    this._publicationStrategies[collectionName] = strategy;\n  },\n\n  /**\n   * @summary Gets the publication strategy for the requested collection. You call this method from `Meteor.server`, like `Meteor.server.getPublicationStrategy()`\n   * @locus Server\n   * @alias getPublicationStrategy\n   * @param collectionName {String}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   * @return {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   */\n  getPublicationStrategy(collectionName) {\n    return this._publicationStrategies[collectionName]\n      || this.options.defaultPublicationStrategy;\n  },\n\n  /**\n   * @summary Register a callback to be called when a new DDP message is received.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP message is received.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onMessage: function (fn) {\n    var self = this;\n    return self.onMessageHook.register(fn);\n  },\n\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof (msg.version) === 'string' &&\n          _.isArray(msg.support) &&\n          _.all(msg.support, _.isString) &&\n          _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed',\n                                version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]}));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed', version: version}));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions.set(socket._meteorSession.id, socket._meteorSession);\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession)\n        callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish).\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    if (! _.isObject(name)) {\n      options = options || {};\n\n      if (name && name in self.publish_handlers) {\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n        return;\n      }\n\n      if (Package.autopublish && !options.is_auto) {\n        // They have autopublish on, yet they're trying to manually\n        // pick stuff to publish. They probably should turn off\n        // autopublish. (This check isn't perfect -- if you create a\n        // publish before you turn on autopublish, it won't catch\n        // it, but this will definitely handle the simple case where\n        // you've added the autopublish package to your app, and are\n        // calling publish from your app code).\n        if (!self.warned_about_autopublish) {\n          self.warned_about_autopublish = true;\n          Meteor._debug(\n    \"** You've set up some data subscriptions with Meteor.publish(), but\\n\" +\n    \"** you still have autopublish turned on. Because autopublish is still\\n\" +\n    \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" +\n    \"** will still be sent to all clients.\\n\" +\n    \"**\\n\" +\n    \"** Turn off autopublish by removing the autopublish package:\\n\" +\n    \"**\\n\" +\n    \"**   $ meteor remove autopublish\\n\" +\n    \"**\\n\" +\n    \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" +\n    \"** for each collection that you want clients to see.\\n\");\n        }\n      }\n\n      if (name)\n        self.publish_handlers[name] = handler;\n      else {\n        self.universal_publish_handlers.push(handler);\n        // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for\n        // self.sessions to change while we're running this loop.\n        self.sessions.forEach(function (session) {\n          if (!session._dontStartNewUniversalSubs) {\n            session._startSubscription(handler);\n          }\n        });\n      }\n    }\n    else{\n      _.each(name, function(value, key) {\n        self.publish(key, value, {});\n      });\n    }\n  },\n\n  _removeSession: function (session) {\n    var self = this;\n    self.sessions.delete(session.id);\n  },\n\n  /**\n   * @summary Tells if the method call came from a call or a callAsync.\n   * @locus Anywhere\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @returns boolean\n   */\n  isAsyncCall: function(){\n    return DDP._CurrentMethodInvocation._isCallAsyncMethodRunning()\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n\n  call: function (name, ...args) {\n    if (args.length && typeof args[args.length - 1] === \"function\") {\n      // If it's a function, the last argument is the result callback, not\n      // a parameter to the remote method.\n      var callback = args.pop();\n    }\n\n    return this.apply(name, args, callback);\n  },\n\n  // A version of the call method that always returns a Promise.\n  callAsync: function (name, ...args) {\n    const options = args[0]?.hasOwnProperty('returnStubValue')\n      ? args.shift()\n      : {};\n    DDP._CurrentMethodInvocation._set();\n    DDP._CurrentMethodInvocation._setCallAsyncMethodRunning(true);\n    const promise = new Promise((resolve, reject) => {\n      DDP._CurrentCallAsyncInvocation._set({ name, hasCallAsyncParent: true });\n      this.applyAsync(name, args, { isFromCallAsync: true, ...options })\n        .then(resolve)\n        .catch(reject)\n        .finally(() => {\n          DDP._CurrentCallAsyncInvocation._set();\n        });\n    });\n    return promise.finally(() =>\n      DDP._CurrentMethodInvocation._setCallAsyncMethodRunning(false)\n    );\n  },\n\n  apply: function (name, args, options, callback) {\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (! callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n    const promise = this.applyAsync(name, args, options);\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case).\n    if (callback) {\n      promise.then(\n        result => callback(undefined, result),\n        exception => callback(exception)\n      );\n    } else {\n      return promise;\n    }\n  },\n\n  // @param options {Optional Object}\n  applyAsync: function (name, args, options) {\n    // Run the handler\n    var handler = this.method_handlers[name];\n\n    if (! handler) {\n      return Promise.reject(\n        new Meteor.Error(404, `Method '${name}' not found`)\n      );\n    }\n    // If this is a method call from within another method or publish function,\n    // get the user state from the outer method or publish function, otherwise\n    // don't allow setUserId to be called\n    var userId = null;\n    var setUserId = function() {\n      throw new Error(\"Can't call setUserId on a server initiated method call\");\n    };\n    var connection = null;\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n    var randomSeed = null;\n    if (currentMethodInvocation) {\n      userId = currentMethodInvocation.userId;\n      setUserId = function(userId) {\n        currentMethodInvocation.setUserId(userId);\n      };\n      connection = currentMethodInvocation.connection;\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n    } else if (currentPublicationInvocation) {\n      userId = currentPublicationInvocation.userId;\n      setUserId = function(userId) {\n        currentPublicationInvocation._session._setUserId(userId);\n      };\n      connection = currentPublicationInvocation.connection;\n    }\n\n    var invocation = new DDPCommon.MethodInvocation({\n      isSimulation: false,\n      userId,\n      setUserId,\n      connection,\n      randomSeed\n    });\n\n    return new Promise((resolve, reject) => {\n      let result;\n      try {\n        result = DDP._CurrentMethodInvocation.withValue(invocation, () =>\n          maybeAuditArgumentChecks(\n            handler,\n            invocation,\n            EJSON.clone(args),\n            \"internal call to '\" + name + \"'\"\n          )\n        );\n      } catch (e) {\n        return reject(e);\n      }\n      if (!Meteor._isPromise(result)) {\n        return resolve(result);\n      }\n      result.then(r => resolve(r)).catch(reject);\n    }).then(EJSON.clone);\n  },\n\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions.get(sessionId);\n    if (session)\n      return session._socketUrl;\n    else\n      return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions,\n                                 serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion;\n\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception) return exception;\n\n  // To allow packages to throw errors intended for the client but not have to\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n  // error before it is thrown.\n  if (exception.isClientSafe) {\n    if (!(exception instanceof Meteor.Error)) {\n      const originalMessage = exception.message;\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n      exception.message = originalMessage;\n    }\n    return exception;\n  }\n\n  // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n  // the server log.\n  if (!exception._expectedByTest) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError.isClientSafe)\n      return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" +\n                  \"does not have isClientSafe property set; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(\n      f, context, args, description);\n  }\n  return f.apply(context, args);\n};\n","// A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\nDDPServer._WriteFence = class {\n  constructor() {\n    this.armed = false;\n    this.fired = false;\n    this.retired = false;\n    this.outstanding_writes = 0;\n    this.before_fire_callbacks = [];\n    this.completion_callbacks = [];\n  }\n\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite() {\n    if (this.retired)\n      return { committed: function () {} };\n\n    if (this.fired)\n      throw new Error(\"fence has already activated -- too late to add writes\");\n\n    this.outstanding_writes++;\n    let committed = false;\n    const _committedFn = async () => {\n      if (committed)\n        throw new Error(\"committed called twice on the same write\");\n      committed = true;\n      this.outstanding_writes--;\n      await this._maybeFire();\n    };\n\n    return {\n      committed: _committedFn,\n    };\n  }\n\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm() {\n\n    if (this === DDPServer._getCurrentFence())\n      throw Error(\"Can't arm the current fence\");\n    this.armed = true;\n    return this._maybeFire();\n  }\n\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire(func) {\n    if (this.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n          \"add a callback\");\n    this.before_fire_callbacks.push(func);\n  }\n\n  // Register a function to be called when the fence fires.\n  onAllCommitted(func) {\n    if (this.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n          \"add a callback\");\n    this.completion_callbacks.push(func);\n  }\n\n  async _armAndWait() {\n    let resolver;\n    const returnValue = new Promise(r => resolver = r);\n    this.onAllCommitted(resolver);\n    await this.arm();\n\n    return returnValue;\n  }\n  // Convenience function. Arms the fence, then blocks until it fires.\n  async armAndWait() {\n    return this._armAndWait();\n  }\n\n  async _maybeFire() {\n    if (this.fired)\n      throw new Error(\"write fence already activated?\");\n    if (this.armed && !this.outstanding_writes) {\n      const invokeCallback = async (func) => {\n        try {\n          await func(this);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback:\", err);\n        }\n      };\n\n      this.outstanding_writes++;\n      while (this.before_fire_callbacks.length > 0) {\n        const cb = this.before_fire_callbacks.shift();\n        await invokeCallback(cb);\n      }\n      this.outstanding_writes--;\n\n      if (!this.outstanding_writes) {\n        this.fired = true;\n        const callbacks = this.completion_callbacks || [];\n        this.completion_callbacks = [];\n        while (callbacks.length > 0) {\n          const cb = callbacks.shift();\n          await invokeCallback(cb);\n        }\n      }\n    }\n  }\n\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire() {\n    if (!this.fired)\n      throw new Error(\"Can't retire a fence that hasn't fired.\");\n    this.retired = true;\n  }\n};\n\n// The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable;\n","// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.listenersByCollectionCount = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (! _.has(msg, 'collection')) {\n      return '';\n    } else if (typeof(msg.collection) === 'string') {\n      if (msg.collection === '')\n        throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n    var record = {trigger: EJSON.clone(trigger), callback: callback};\n    if (! _.has(self.listenersByCollection, collection)) {\n      self.listenersByCollection[collection] = {};\n      self.listenersByCollectionCount[collection] = 0;\n    }\n    self.listenersByCollection[collection][id] = record;\n    self.listenersByCollectionCount[collection]++;\n\n    if (self.factName && Package['facts-base']) {\n      Package['facts-base'].Facts.incrementServerFact(\n        self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function () {\n        if (self.factName && Package['facts-base']) {\n          Package['facts-base'].Facts.incrementServerFact(\n            self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        self.listenersByCollectionCount[collection]--;\n        if (self.listenersByCollectionCount[collection] === 0) {\n          delete self.listenersByCollection[collection];\n          delete self.listenersByCollectionCount[collection];\n        }\n      }\n    };\n  },\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: async function (notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (! _.has(self.listenersByCollection, collection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    _.each(listenersForCollection, function (l, id) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    for (const id of callbackIds) {\n      if (_.has(listenersForCollection, id)) {\n        await listenersForCollection[id].callback(notification);\n      }\n    }\n  },\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof(notification.id) === 'string' &&\n        typeof(trigger.id) === 'string' &&\n        notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID &&\n        trigger.id instanceof MongoID.ObjectID &&\n        ! notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return _.all(trigger, function (triggerValue, key) {\n      return !_.has(notification, key) ||\n        EJSON.equals(triggerValue, notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});\n","if (process.env.DDP_DEFAULT_CONNECTION_URL) {\n  __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL =\n    process.env.DDP_DEFAULT_CONNECTION_URL;\n}\n\nMeteor.server = new Server();\n\nMeteor.refresh = async function (notification) {\n  await DDPServer._InvalidationCrossbar.fire(notification);\n};\n\n// Proxy the public methods of Meteor.server so they can\n// be called directly on Meteor.\n_.each(\n  [\n    'publish',\n    'isAsyncCall',\n    'methods',\n    'call',\n    'callAsync',\n    'apply',\n    'applyAsync',\n    'onConnection',\n    'onMessage',\n  ],\n  function(name) {\n    Meteor[name] = _.bind(Meteor.server[name], Meteor.server);\n  }\n);\n"]}